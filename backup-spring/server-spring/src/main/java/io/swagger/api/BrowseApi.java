/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Event;
import io.swagger.model.Participant;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-03-31T11:11:07.248176+02:00[Europe/Warsaw]")
@Api(value = "Browse", description = "the Browse API")
public interface BrowseApi {

    @ApiOperation(value = "Get information of specific event", nickname = "browseEventIDGet", notes = "", response = Object.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns a single event data", response = Object.class),
        @ApiResponse(code = 404, message = "Invalid Event ID") })
    @RequestMapping(value = "/Browse/{EventID}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<Object> browseEventIDGet(@Min(1)@ApiParam(value = "The ID of user created Event.",required=true, allowableValues="") @PathVariable("EventID") Integer eventID
);


    @ApiOperation(value = "Receive data of all participants", nickname = "browseEventIDParticipateGet", notes = "", response = Participant.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Participants", response = Participant.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Invalid Event ID") })
    @RequestMapping(value = "/Browse/{EventID}/participate",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Participant>> browseEventIDParticipateGet(@Min(1)@ApiParam(value = "The ID of user created Event.",required=true, allowableValues="") @PathVariable("EventID") Integer eventID
);


    @ApiOperation(value = "Send user data or organizer", nickname = "browseEventIDParticipatePost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User Registered to participate"),
        @ApiResponse(code = 404, message = "Invalid Event ID") })
    @RequestMapping(value = "/Browse/{EventID}/participate",
        method = RequestMethod.POST)
    ResponseEntity<Void> browseEventIDParticipatePost(@Min(1)@ApiParam(value = "The ID of user created Event.",required=true, allowableValues="") @PathVariable("EventID") Integer eventID
);


    @ApiOperation(value = "Update information of specific event", nickname = "browseEventIDPost", notes = "", response = Object.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Changes an event data", response = Object.class),
        @ApiResponse(code = 404, message = "Invalid Event ID") })
    @RequestMapping(value = "/Browse/{EventID}",
        produces = { "*/*" }, 
        consumes = { "*/*" },
        method = RequestMethod.POST)
    ResponseEntity<Object> browseEventIDPost(@ApiParam(value = "Event updated info" ,required=true )  @Valid @RequestBody Event body
,@Min(1)@ApiParam(value = "The ID of user created Event.",required=true, allowableValues="") @PathVariable("EventID") Integer eventID
);


    @ApiOperation(value = "Receive sport events according to criteria", nickname = "browseGet", notes = "", response = Event.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns data about all requested events data", response = Event.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid search data") })
    @RequestMapping(value = "/Browse",
        produces = { "*/*" }, 
        consumes = { "*/*" },
        method = RequestMethod.GET)
    ResponseEntity<List<Event>> browseGet(@ApiParam(value = "User specified search criteria" ,required=true )  @Valid @RequestBody Event body
);

}
